{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["PriceFormatter","Intl","NumberFormat","style","currency","minimumFractionDigits","App","state","exchanges","currencies","fetch","then","res","json","data","console","log","setState","preprocess","catch","class","className","Object","entries","this","map","k","v","Currency","name","value","href","Component","props","Exchange","recommendBuy","title","format","buyPrice","recommendSell","sellPrice","currencyNames","Set","add","forEach","prototype","hasOwnProperty","call","orderedExchanges","keys","sort","reduce","obj","key","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6dbc6607.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nconst PriceFormatter = new Intl.NumberFormat(\"en-US\", {\n  style: \"currency\",\n  currency: \"USD\",\n  minimumFractionDigits: 6,\n});\nclass App extends Component {\n\n  state = {\n    exchanges: {},\n    currencies: {}\n  }\n\n  componentDidMount() {\n    // Get Currency Data from backend api\n    fetch('http://localhost:8080/CryptoTrader/api/details')\n      .then(res => res.json())\n      .then((data) => {\n        console.log(data)\n        this.setState({ currencies: preprocess(data) })\n      })\n      .catch(console.log)\n  }\n\n  render() {\n    return (\n      <div class=\"container-fluid\">\n        <div className=\"page-header\">\n          <h1 class=\"p-2\">CryptoTrader</h1>\n        </div>\n        {Object.entries(this.state.currencies).map(([k, v])=>\n          <Currency name={k} value={v}></Currency>\n        )}\n        <div className=\"footer fixed-bottom\">\n          <h5 class=\"px-4\">Created by <a href=\"mailto:dvalotia@vt.edu\">Dishang Valotia</a></h5>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction Currency(props) {\n  const exchanges = Object.entries(props.value).map(([k, v])=>\n    <Exchange value={v}></Exchange>\n  );\n\n  return (\n    <div class=\"card p-3 m-2\">\n      <h4 className=\"card-title\">{props.name}</h4>\n      <div>\n        <div class=\"row flex-nowrap\">\n          <div class=\"col-md-3\"><b>Exchange</b></div>\n          <div class=\"col-md-4\"><b>Buy Price</b></div>\n          <div class=\"col-md-5\"><b>Sell Price</b></div>\n        </div>\n        {exchanges}\n      </div>\n    </div>\n  )\n}\n\nfunction Exchange(props) {\n  return (\n    <div class=\"row flex-nowrap\">\n      <div class=\"col-md-3\">{props.value.name}</div>\n      {props.value.recommendBuy\n        ? <div class=\"col-md-4 recommended\" title=\"Recommended Buy\">\n            {PriceFormatter.format(props.value.buyPrice)} &nbsp;\n            <i className=\"far fa-check-circle\"></i></div>\n        : <div class=\"col-md-4\">{PriceFormatter.format(props.value.buyPrice)}</div>\n      }\n      {props.value.recommendSell\n        ? <div class=\"col-md-5 recommended\" title=\"Recommended Sell\">\n          {PriceFormatter.format(props.value.buyPrice)} &nbsp;\n          <i className=\"far fa-check-circle\"></i></div>\n        : <div class=\"col-md-5\">{PriceFormatter.format(props.value.sellPrice)}</div>\n      }\n    </div>\n  )\n}\n\n\n/**\n * Convert exchanges JSON to currencies JSON. Basically it inverts the exchanges JSON\n * @param exchanges - JSON of the format {Exchange1:{Currency1:{}, Currency2:{}}, Exchange2:{Currency1:{}, Currency2:{}}}\n * @returns {} - JSON of the format {Currency1: Exchange1:{}, Exchange2:{}, Currency2: Exchange1:{}, Exchange2:{}}\n */\nfunction preprocess(exchanges) {\n  const currencyNames = new Set();\n  const currencies = {};\n  // Add all currency names to a set\n  Object.entries(exchanges).map(([k,v]) => Object.entries(v).map(([k,v]) => currencyNames.add(k)));\n\n  // Invert the JSON\n  currencyNames.forEach(currency => {\n    if(!Object.prototype.hasOwnProperty.call(currencies, currency)){\n      currencies[currency] = {};\n    }\n    Object.entries(exchanges).map(([k,v])=> {\n      currencies[currency][k] = v[currency];\n      currencies[currency][k].name = k;\n    })\n  })\n\n  // Sort the final JSON\n  Object.entries(currencies).map(([k,v]) => {\n    const orderedExchanges = Object.keys(v).sort().reduce(\n      (obj, key) => {\n        obj[key] = v[key];\n        return obj;\n      },\n      {}\n    );\n    currencies[k] = orderedExchanges;\n  })\n\n  return currencies;\n}\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}